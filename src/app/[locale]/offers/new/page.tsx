
"use client";

import { PageHeader } from "@/components/page-header";
import { OfferForm, type OfferFormValues } from "@/components/offers/offer-form";
import { useRouter } from "@/navigation"; 
import { useToast } from "@/hooks/use-toast";
import type { OfferFirestoreData } from "@/types";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp, Timestamp } from "firebase/firestore";
import { useTranslations } from 'next-intl'; 

const OFFERS_COLLECTION_NAME = "offers";

export default function NewOfferPage() {
  const router = useRouter();
  const { toast } = useToast();
  const t = useTranslations('NewOfferPage');
  const tCommon = useTranslations('Common');

  const handleSubmitOffer = async (formDataFromForm: OfferFormValues) => {
    console.log("New Offer Data from form for Firestore submission:", formDataFromForm);
    
    // Exclude fields that are not part of OfferFirestoreData or are handled by serverTimestamp
    // id is generated by Firestore, createdDate & lastUpdated are server timestamps
    const { id, createdDate, lastUpdated, ...restOfFormData } = formDataFromForm;

    try {
      const offerDataToSave: Omit<OfferFirestoreData, 'id'> = {
        ...restOfFormData, 
        createdDate: serverTimestamp() as Timestamp, // Let Firestore generate the timestamp
        lastUpdated: serverTimestamp() as Timestamp, // Let Firestore generate the timestamp
      };

      const docRef = await addDoc(collection(db, OFFERS_COLLECTION_NAME), offerDataToSave);

      toast({
        title: t('offer_created_toast_title'),
        description: t('offer_created_toast_description', { offerNumber: formDataFromForm.offerNumber, clientName: formDataFromForm.clientName }),
        variant: "default",
      });

      router.push("/offers");
    } catch (error) {
      console.error("Failed to save offer to Firestore:", error);
      toast({
        title: t('error_creating_offer_toast_title'),
        description: `${t('error_creating_offer_toast_description')} ${error instanceof Error ? error.message : String(error)}`,
        variant: "destructive",
      });
    }
  };

  return (
    <div>
      <PageHeader
        title={t('title')}
        description={t('description')}
      />
      <OfferForm onSubmit={handleSubmitOffer} />
    </div>
  );
}

    